from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from bot.states.new_ad_states import NewAdStates
from bot.keyboards.category_kb import get_category_kb
from bot.utils import db

router = Router()

def get_top_options_kb():
    builder = InlineKeyboardBuilder()
    builder.button(text="üëë Premium (7 –∫“Ø–Ω) - 1000 —Ç–≥", callback_data="top_7")
    builder.button(text="‚≠ê VIP (3 –∫“Ø–Ω) - 500 —Ç–≥", callback_data="top_3")
    builder.button(text="üî• Standart (1 –∫“Ø–Ω) - 300 —Ç–≥", callback_data="top_1")
    builder.button(text="‚û°Ô∏è –ñ–∞–π –∂–∞—Ä–∏—è–ª–∞—É", callback_data="top_0")
    builder.adjust(1)
    return builder.as_markup()

# ... (new_ad_start, category_selected, title_entered, description_entered, price_entered, contact_entered —Ñ—É–Ω–∫—Ü–∏—è–ª–∞—Ä—ã ”©–∑–≥–µ—Ä—ñ—Å—Å—ñ–∑) ...

@router.message(F.text == "üìù –ñ–∞“£–∞ —Ö–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É")
async def new_ad_start(message: Message, state: FSMContext):
    user = await db.get_user(message.from_user.id)
    if not user or not user[4]:
        await message.answer("–ê–ª–¥—ã–º–µ–Ω “õ–∞–ª–∞–Ω—ã —Ç–∞“£–¥–∞—É—ã“£—ã–∑ –∫–µ—Ä–µ–∫. –û–ª “Ø—à—ñ–Ω ¬´üèôÔ∏è “ö–∞–ª–∞–Ω—ã ”©–∑–≥–µ—Ä—Ç—É¬ª –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—ã“£—ã–∑.")
        return
    await state.set_state(NewAdStates.waiting_for_category)
    await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è–Ω—ã —Ç–∞“£–¥–∞“£—ã–∑:", reply_markup=get_category_kb())

@router.callback_query(NewAdStates.waiting_for_category, F.data.startswith("cat_"))
async def category_selected(callback: CallbackQuery, state: FSMContext):
    category = callback.data.split("_", 1)[1]
    await state.update_data(category=category)
    await state.set_state(NewAdStates.waiting_for_title)
    await callback.message.edit_text(f"–¢–∞“£–¥–∞–ª“ì–∞–Ω –∫–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{category}</b>\n\n–ï–Ω–¥—ñ —Ö–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É–¥—ã“£ —Ç–∞“õ—ã—Ä—ã–±—ã–Ω –∂–∞–∑—ã“£—ã–∑:")
    await callback.answer()

@router.message(NewAdStates.waiting_for_title)
async def title_entered(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(NewAdStates.waiting_for_description)
    await message.answer("–°–∏–ø–∞—Ç—Ç–∞–º–∞—Å—ã–Ω –∂–∞–∑—ã“£—ã–∑ (–∂–∞“ì–¥–∞–π—ã, –µ—Ä–µ–∫—à–µ–ª—ñ–∫—Ç–µ—Ä—ñ, —Ç.–±.):")

@router.message(NewAdStates.waiting_for_description)
async def description_entered(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(NewAdStates.waiting_for_price)
    await message.answer("–ë–∞“ì–∞—Å—ã–Ω –∂–∞–∑—ã“£—ã–∑ (–º—ã—Å–∞–ª—ã, '150000 —Ç–≥' –Ω–µ–º–µ—Å–µ '–∫–µ–ª—ñ—Å—ñ–º–¥—ñ'):")

@router.message(NewAdStates.waiting_for_price)
async def price_entered(message: Message, state: FSMContext):
    await state.update_data(price=message.text)
    await state.set_state(NewAdStates.waiting_for_contact)
    await message.answer("–ë–∞–π–ª–∞–Ω—ã—Å “Ø—à—ñ–Ω –Ω”©–º—ñ—Ä—ñ“£—ñ–∑–¥—ñ –Ω–µ–º–µ—Å–µ Telegram –Ω–∏–≥—ñ“£—ñ–∑–¥—ñ –∂–∞–∑—ã“£—ã–∑:")

@router.message(NewAdStates.waiting_for_contact)
async def contact_entered(message: Message, state: FSMContext):
    await state.update_data(contact=message.text)
    await state.set_state(NewAdStates.waiting_for_photo)
    await message.answer("–°—É—Ä–µ—Ç—ñ–Ω –∂—ñ–±–µ—Ä—ñ“£—ñ–∑ –Ω–µ–º–µ—Å–µ '—Å—É—Ä–µ—Ç—Å—ñ–∑' –¥–µ–ø –∂–∞–∑—ã“£—ã–∑.")


# --- –ñ–ê“¢–ê–†–¢–´–õ“í–ê–ù –õ–û–ì–ò–ö–ê ---
@router.message(NewAdStates.waiting_for_photo)
async def photo_entered(message: Message, state: FSMContext):
    if message.photo:
        await state.update_data(photo=message.photo[-1].file_id)
    else:
        await state.update_data(photo=None)

    data = await state.get_data()
    user_info = await db.get_user(message.from_user.id)
    city = user_info[4]
    await state.update_data(city=city, user_id=message.from_user.id)

    ad_text = (
        f"<b>{data['title']}</b>\n\n"
        f"<b>–°–∏–ø–∞—Ç—Ç–∞–º–∞—Å—ã:</b> {data['description']}\n"
        f"<b>–ë–∞“ì–∞—Å—ã:</b> {data['price']}\n\n"
        f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {data['category']}\n"
        f"<b>“ö–∞–ª–∞:</b> {city}\n"
        f"<b>–ë–∞–π–ª–∞–Ω—ã—Å:</b> {data['contact']}"
    )

    await state.set_state(NewAdStates.waiting_for_confirmation)
    if data.get('photo'):
        await message.answer_photo(photo=data['photo'], caption=f"–¢–µ–∫—Å–µ—Ä—ñ–ø —à—ã“ì—ã“£—ã–∑:\n\n{ad_text}\n\n–ë”ô—Ä—ñ –¥“±—Ä—ã—Å –ø–∞?", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –ò”ô, –¥“±—Ä—ã—Å", callback_data="confirm_ad_yes")],[InlineKeyboardButton(text="‚ùå –ñ–æ“õ, –±–∞—Å —Ç–∞—Ä—Ç—É", callback_data="confirm_ad_no")]]))
    else:
        await message.answer(f"–¢–µ–∫—Å–µ—Ä—ñ–ø —à—ã“ì—ã“£—ã–∑:\n\n{ad_text}\n\n–ë”ô—Ä—ñ –¥“±—Ä—ã—Å –ø–∞?", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –ò”ô, –¥“±—Ä—ã—Å", callback_data="confirm_ad_yes")],[InlineKeyboardButton(text="‚ùå –ñ–æ“õ, –±–∞—Å —Ç–∞—Ä—Ç—É", callback_data="confirm_ad_no")]]))

@router.callback_query(NewAdStates.waiting_for_confirmation, F.data == "confirm_ad_yes")
async def ad_confirmed(callback: CallbackQuery, state: FSMContext):
    await state.set_state(NewAdStates.waiting_for_top_choice)
    await callback.message.edit_text(
        "–•–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É—ã“£—ã–∑–¥—ã –∂–æ“ì–∞—Ä—ã“ì–∞ —à—ã“ì–∞—Ä—ã–ø, –∫”©–±—ñ—Ä–µ–∫ –∞–¥–∞–º“ì–∞ –∫”©—Ä—Å–µ—Ç–∫—ñ“£—ñ–∑ –∫–µ–ª–µ –º–µ?",
        reply_markup=get_top_options_kb()
    )
    await callback.answer()

@router.callback_query(NewAdStates.waiting_for_confirmation, F.data == "confirm_ad_no")
async def ad_cancelled(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –•–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É –∂–∞—Ä–∏—è–ª–∞–Ω–±–∞–¥—ã.")
    await callback.answer()

@router.callback_query(NewAdStates.waiting_for_top_choice, F.data.startswith("top_"))
async def top_choice_handler(callback: CallbackQuery, state: FSMContext):
    choice = callback.data.split("_")[1]
    data = await state.get_data()
    
    # –•–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É–¥—ã –±–∞–∑–∞“ì–∞ “õ–æ—Å—É
    ad_id = await db.add_ad_to_db(data)
    
    if choice == "0":
        await callback.message.edit_text("‚úÖ –°—ñ–∑–¥—ñ“£ —Ö–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É—ã“£—ã–∑ —Å”ô—Ç—Ç—ñ –∂–∞—Ä–∏—è–ª–∞–Ω–¥—ã!")
    else:
        days = int(choice)
        # --- –¢”®–õ–ï–ú –ñ“Æ–ô–ï–°–Ü–ù “ö–û–°–ê–¢–´–ù –ñ–ï–† ---
        # –û—Å—ã –∂–µ—Ä–¥–µ —Å—ñ–∑ Payme, YooKassa, —Ç.–±. —Ç”©–ª–µ–º –∂“Ø–π–µ—Å—ñ–Ω–µ —Å—ñ–ª—Ç–µ–º–µ –∂–∞—Å–∞–π—Å—ã–∑.
        # –¢”©–ª–µ–º —Å”ô—Ç—Ç—ñ ”©—Ç–∫–µ–Ω–Ω–µ–Ω –∫–µ–π—ñ–Ω “ì–∞–Ω–∞ –¢–û–ü —Å—Ç–∞—Ç—É—Å –±–µ—Ä—ñ–ª–µ–¥—ñ.
        # “ö–∞–∑—ñ—Ä –±—ñ–∑ —Ç”©–ª–µ–º–¥—ñ —Å”ô—Ç—Ç—ñ ”©—Ç—Ç—ñ –¥–µ–ø —Å–∏–º—É–ª—è—Ü–∏—è –∂–∞—Å–∞–π–º—ã–∑.
        await db.set_ad_top(ad_id, days)
        await callback.message.edit_text(f"‚úÖ –•–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É –∂–∞—Ä–∏—è–ª–∞–Ω–¥—ã –∂”ô–Ω–µ {days} –∫“Ø–Ω–≥–µ –¢–û–ü —Å—Ç–∞—Ç—É—Å—ã–Ω –∞–ª–¥—ã!")
        # --- –¢”®–õ–ï–ú –õ–û–ì–ò–ö–ê–°–´–ù–´“¢ –°–û“¢–´ ---

    await state.clear()
    await callback.answer()