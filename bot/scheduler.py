import logging
from aiogram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from bot.utils import db
from aiogram.exceptions import TelegramAPIError
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

async def check_ads_for_expiry(bot: Bot):
    logging.info("Running scheduled job: checking for ad expiry...")
    try:
        ads_to_notify, ads_to_delete = await db.get_ads_for_expiry_check()

        # 1. –ï—Å–∫–µ—Ä—Ç—É –∂—ñ–±–µ—Ä—É
        for ad_id, user_id, title in ads_to_notify:
            try:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ 7 –∫“Ø–Ω–≥–µ “±–∑–∞—Ä—Ç—É", callback_data=f"extend_{ad_id}")]
                ])
                await bot.send_message(
                    user_id,
                    f"üîî –ï—Å–∫–µ—Ä—Ç—É!\n\n–°—ñ–∑–¥—ñ“£ ¬´<b>{title}</b>¬ª –∞—Ç—Ç—ã —Ö–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É—ã“£—ã–∑–¥—ã“£ –º–µ—Ä–∑—ñ–º—ñ —à–∞–º–∞–º–µ–Ω 1 —Å–∞“ì–∞—Ç—Ç–∞–Ω —Å–æ“£ –±—ñ—Ç–µ–¥—ñ.\n\n"
                    "–û–Ω—ã —Ç–∞“ì—ã 7 –∫“Ø–Ω–≥–µ “±–∑–∞—Ä—Ç“õ—ã“£—ã–∑ –∫–µ–ª–µ –º–µ?",
                    reply_markup=keyboard
                )
                await db.update_ad_status(ad_id, 'pending_deletion') # “ö–∞–π—Ç–∞ –µ—Å–∫–µ—Ä—Ç—É –∂—ñ–±–µ—Ä–º–µ—Å “Ø—à—ñ–Ω
            except TelegramAPIError as e:
                logging.error(f"Failed to send notification to {user_id} for ad {ad_id}: {e}")

        # 2. ”®—à—ñ—Ä—É
        for ad_id, user_id, title in ads_to_delete:
            try:
                await bot.send_message(
                    user_id,
                    f"üóëÔ∏è –°—ñ–∑–¥—ñ“£ ¬´<b>{title}</b>¬ª –∞—Ç—Ç—ã —Ö–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É—ã“£—ã–∑–¥—ã“£ –º–µ—Ä–∑—ñ–º—ñ –±—ñ—Ç—ñ–ø, –∂“Ø–π–µ–¥–µ–Ω ”©—à—ñ—Ä—ñ–ª–¥—ñ."
                )
                await db.update_ad_status(ad_id, 'expired')
            except TelegramAPIError as e:
                logging.error(f"Failed to send expiry message to {user_id} for ad {ad_id}: {e}")
    
    except Exception as e:
        logging.error(f"Error in scheduler job: {e}")


def setup_scheduler(bot: Bot):
    scheduler = AsyncIOScheduler(timezone="Asia/Almaty")
    # –ñ“±–º—ã—Å—Ç—ã ”ô—Ä —Å–∞“ì–∞—Ç —Å–∞–π—ã–Ω —ñ—Å–∫–µ “õ–æ—Å—É
    scheduler.add_job(check_ads_for_expiry, 'interval', hours=1, args=(bot,))
    scheduler.start()
    logging.info("Scheduler started.")